{
  
    
        "post0": {
            "title": "Análise da audiência das novelas das nove, na Rede Globo.",
            "content": ". Sobre este projeto . Esta é a minha primeira Análise Exploratória de Dados, fazendo uso da biblioteca Plotly. Para desenvolver este estudo, utilizei uma base de dados fornecida por Rubens Alves, no Kaggle, onde são apresentadas algumas informações sobre a audiência das novelas da Rede Globo. Como a comunicação me fascina, resolvi partilhar insights, tomando em conta as novelas, seus autores e a quantidade de pontos de audiência, aferidos entre 1966 e 2019. Espero que goste! . dataset: https://www.kaggle.com/rubaoalves/novelas-globo . Disclaimer: Antes que você se pergunte, não sou fã de novelas e nem as assisto. No entanto tudo o que envolve comunicação me instiga. . Então, vamos lá! . O Plotly . O Plotly é uma biblioteca de visualização maravilhosa que nos permite além de visualizar, interagir com os gráficos plotados em em nossa análise de dados. . Documentação: https://plotly.com . Sobre o Ibope . Os pontos percentuais de audiência são atualizados anualmente pela Kantar Ibope Media. Para ser ter uma noção de como funciona, na Grande São Paulo, por exemplo, 1 ponto de audiência representa 73.015 domicílios que assistiram a determinado programa, ou cerca de 200.766 pessoas. Já na capital do Rio de Janeiro, cada ponto equivale a 46.175 domicílios, ou 118.440 pessoas. Enquanto no &quot;Painel Nacional de Televisão&quot;, cada ponto reflete 254.892 domicílios e 693.788 indivíduos. . Fonte: https://economia.uol.com.br/noticias/redacao/2019/12/06/como-sao-os-aparelhos-de-medicao-de-audiencia-do-ibope.htm . Por onde come&#231;ar? . . Primeiramente importamos as bibliotecas que iremos utilizar. . import pandas as pd import plotly.graph_objects as go import plotly.express as px import seaborn as sns import numpy as np . Depois importamos nosso dataset e iniciamos nossa análise exploratória. . df = pd.read_excel(&quot;Base Novelas 01.xlsx&quot;) . df.head() . Novela Inicio Final Capitulos Autor Audiencia Faixa Minutos Horas Maiores Mais Famosas Audiência Média Por Autor Posição Autor Número de Paravras Posição Qtd Novelas Classificação Ano Menu . 0 Champagne | 1983-10-24 | 1984-05-04 | 167 | Cassiano Gabus Mendes | 46.84 | 21 hrs | 8350 | 139.166667 | 155 | 70 | 50.644167 | 1 | 1 | 7 | &gt;40 | 1984 | 01 - &gt;40 | . 1 Meu Bem, Meu Mal | 1990-10-29 | 1991-05-17 | 173 | Cassiano Gabus Mendes | 50.34 | 21 hrs | 8650 | 144.166667 | 135 | 45 | 50.644167 | 1 | 4 | 7 | &gt;40 | 1991 | 01 - &gt;40 | . 2 Escalada | 1975-01-06 | 1975-08-25 | 199 | Lauro César Muniz | 47.96 | 21 hrs | 9950 | 165.833333 | 62 | 59 | 48.451000 | 3 | 1 | 11 | &gt;40 | 1975 | 01 - &gt;40 | . 3 O Casarão | 1976-06-07 | 1976-12-10 | 159 | Lauro César Muniz | 51.82 | 21 hrs | 7950 | 132.500000 | 188 | 36 | 48.451000 | 3 | 2 | 11 | &gt;40 | 1976 | 01 - &gt;40 | . 4 Espelho Mágico | 1977-06-14 | 1977-12-05 | 150 | Lauro César Muniz | 48.91 | 21 hrs | 7500 | 125.000000 | 216 | 54 | 48.451000 | 3 | 2 | 11 | &gt;40 | 1977 | 01 - &gt;40 | . df.shape . (89, 18) . Note que nosso dataset não possui dados faltantes, o que irá facilitar nossa análise. . df.isnull() . Novela Inicio Final Capitulos Autor Audiencia Faixa Minutos Horas Maiores Mais Famosas Audiência Média Por Autor Posição Autor Número de Paravras Posição Qtd Novelas Classificação Ano Menu . 0 False | False | False | False | False | False | False | False | False | False | False | False | False | False | False | False | False | False | . 1 False | False | False | False | False | False | False | False | False | False | False | False | False | False | False | False | False | False | . 2 False | False | False | False | False | False | False | False | False | False | False | False | False | False | False | False | False | False | . 3 False | False | False | False | False | False | False | False | False | False | False | False | False | False | False | False | False | False | . 4 False | False | False | False | False | False | False | False | False | False | False | False | False | False | False | False | False | False | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 84 False | False | False | False | False | False | False | False | False | False | False | False | False | False | False | False | False | False | . 85 False | False | False | False | False | False | False | False | False | False | False | False | False | False | False | False | False | False | . 86 False | False | False | False | False | False | False | False | False | False | False | False | False | False | False | False | False | False | . 87 False | False | False | False | False | False | False | False | False | False | False | False | False | False | False | False | False | False | . 88 False | False | False | False | False | False | False | False | False | False | False | False | False | False | False | False | False | False | . 89 rows × 18 columns . df.dtypes . Novela object Inicio datetime64[ns] Final datetime64[ns] Capitulos int64 Autor object Audiencia float64 Faixa object Minutos int64 Horas float64 Maiores int64 Mais Famosas int64 Audiência Média Por Autor float64 Posição Autor int64 Número de Paravras int64 Posição Qtd Novelas int64 Classificação object Ano int64 Menu object dtype: object . Aqui começamos a tirar alguns insights estatísticos bem relevantes. . . 1- A menor audiência histórica desde 1966 foi de apenas 5.23 pontos. 2- Enquanto a máxima histórica foi de 64.97 pontos. 3- Outro fator interessante é o tempo médio de exibição, de aproximadamente 152 horas. . df.describe() . Capitulos Audiencia Minutos Horas Maiores Mais Famosas Audiência Média Por Autor Posição Autor Número de Paravras Posição Qtd Novelas Ano . count 89.000000 | 89.000000 | 89.000000 | 89.000000 | 89.00000 | 89.000000 | 89.000000 | 89.000000 | 89.000000 | 89.000000 | 89.000000 | . mean 182.696629 | 43.529551 | 9134.831461 | 152.247191 | 107.58427 | 96.730337 | 40.993471 | 15.235955 | 2.449438 | 7.640449 | 1992.584270 | . std 36.886929 | 13.462116 | 1844.346467 | 30.739108 | 79.72122 | 82.429827 | 8.891376 | 14.699275 | 1.000128 | 7.669668 | 15.594149 | . min 35.000000 | 5.230000 | 1750.000000 | 29.166667 | 2.00000 | 1.000000 | 4.135000 | 1.000000 | 1.000000 | 1.000000 | 1966.000000 | . 25% 167.000000 | 37.950000 | 8350.000000 | 139.166667 | 48.00000 | 33.000000 | 40.866667 | 8.000000 | 2.000000 | 4.000000 | 1980.000000 | . 50% 185.000000 | 46.780000 | 9250.000000 | 154.166667 | 79.00000 | 72.000000 | 41.804706 | 11.000000 | 2.000000 | 5.000000 | 1992.000000 | . 75% 203.000000 | 52.150000 | 10150.000000 | 169.166667 | 155.00000 | 137.000000 | 46.068462 | 14.000000 | 3.000000 | 11.000000 | 2006.000000 | . max 301.000000 | 64.970000 | 15050.000000 | 250.833333 | 305.00000 | 302.000000 | 50.644167 | 73.000000 | 5.000000 | 45.000000 | 2019.000000 | . Uma vez que temos estas informações, que tal plotarmos uma linha histórica, identificando a média de audiência para dada período de 1966 a 2019? . audiencia_ano = df[[&quot;Audiencia&quot;,&quot;Ano&quot;]].groupby([&quot;Ano&quot;]).mean() . audiencia_ano.reset_index(inplace=True) . audiencia_ano.head() . Ano Audiencia . 0 1966 | 5.230000 | . 1 1967 | 6.723333 | . 2 1968 | 10.740000 | . 3 1969 | 16.760000 | . 4 1970 | 31.560000 | . Observe que com o Plotly, muito diferente do matplotlib e seaborn, podemos interagir com o gráfico ao passar o mouse por ele, identificando assim o ano exato e sua respectiva pontuação de audiência. . . fig = go.Figure() fig.add_trace(go.Scatter( x=audiencia_ano[&quot;Ano&quot;], y=audiencia_ano[&quot;Audiencia&quot;], mode=&quot;lines&quot; )) # Set custom x-axis labels fig.update_xaxes(showgrid=False) fig.update_yaxes(showgrid=False) # Set figure title fig.update_layout(title_text=&quot;Audiência histórica&quot;) fig.show() . . . Incrível como a visualização tem o poder de explicar muita coisa. . Ao observarmos o gráfico de audiência histórica, já é possível reparar que desde 1990 a audiência das novelas das 21h segue em tendência de baixa, sendo que a audiência atual (2019) se aproxima, e muito, do patamar apresentado em 1970. . Algo já começa a ficar evidente; O período de ouro das novelas das nove, na Rede Globo aconteceu nos anos de 1979, 1986, 1989 e 1990, onde ela conseguiu em alguns momentos atingir incríveis picos entre 60 e 63 pontos de audiência. . A diferença é que no passado, havia apenas 5 anos que a Rede Globo iniciara sua transmissão de novelas às nove da noite e agora, 54 anos depois, apresenta mesmos quase trinta pontos do início de sua empreitada no segmentos. . . Agora que tal analisarmos quais foram os autores que alcançaram a maior audiência da história? . Para isso, existem vários métodos, mas decidi utilizar o groupby para selecionar somente duas colunas e retornar, a quantidade de novelas escritas por autor. . autor_novelas = df[[&quot;Posição Qtd Novelas&quot;,&quot;Autor&quot;]].groupby([&quot;Autor&quot;]).mean() . autor_novelas.reset_index(inplace=True) . autor_novelas . Autor Posição Qtd Novelas . 0 Aguinaldo Silva | 5 | . 1 Benedito Ruy Barbosa | 2 | . 2 Cassiano Gabus Mendes | 7 | . 3 Dias Gomes | 5 | . 4 Emiliano Queiroz | 45 | . 5 Gilberto Braga | 4 | . 6 Glória Magadan | 12 | . 7 Glória Perez | 12 | . 8 Janete Clair | 2 | . 9 José Castellar | 45 | . 10 João Emanuel Carneiro | 17 | . 11 Lauro César Muniz | 11 | . 12 Manoel Carlos | 7 | . 13 Maria Adelaide Amaral | 21 | . 14 Moysés Weltman | 21 | . 15 Regina Braga | 30 | . 16 Sílvio de Abreu | 7 | . 17 Walcyr Carrasco | 7 | . 18 Walther Negrão | 1 | . A primeira coisa que reparamos é que entre todos os autores encontramos o que em ciencia de dados chamamos de outliers(Anomalias). Ou seja, um número minúsculo de autores completou a marca de 45 novelas das nove escritas durante sua carreira. Enquanto a maior parte dos autores de novelas das nove escreveram entre 5 e 20 novelas. . fig = px.box(autor_novelas, y=&quot;Posição Qtd Novelas&quot;) fig.show() . . . Agora a coisa começa a ficar interessante. Por meio do Scatterplot podemos plotar um gráfico que nos mostre a distribuição de novelas e sua respectiva audiência, segmentada cores. Sendo assim, cada artista possui a sua cor. . Ao passar o mouse sobre o gráfico ou selecionar os autores na legenda, você pode aprimorar sua visualização, conseguindo não só comparar autores entre si, mas também qual a novela de determinado autor obteve maior audiência. Incrível, né? . . fig = px.scatter(df, x=&quot;Novela&quot;, y=&quot;Audiencia&quot;, color=&quot;Autor&quot;) fig.show() . . . Mas afinal de contas, qual novela conquistou a maior audiência até hoje? . Ao visualizar o gráfico abaixo notamos que a maior pontuação da história foi alcançada pela novela Tieta, de 1990. Ela chegou a bater 64.97 pontos. . Desde 2010 não se consegue ultrapassar marca de Fina Estampa, com 39.04 pontos de audiência. . fig = px.scatter(df, x=&quot;Ano&quot;, y=&quot;Audiencia&quot;, color=&quot;Novela&quot;) fig.show() . . . Agora, a cereja do bolo! . O Plotly oferece ferramentas para se plotar gráficos lindos em 3D. Ótimo para valorizar suas análises. . fig = px.scatter_3d(df, x=&#39;Ano&#39;, y=&#39;Novela&#39;, z=&#39;Audiencia&#39;, size=&#39;Audiencia&#39;, color=&#39;Audiencia&#39;, hover_data=[&#39;Novela&#39;]) fig.update_layout(scene_zaxis_type=&quot;log&quot;) fig.show() . . . Nosso objetivo com este estudo não é validar a dominância da maior emissora de televisão do país. Mas mostar visualizações incríveis podem auxiliar na contação de histórias de dados que inicialmente parecem tão sem forma e até mesmo vazios. . Reparou como nos últimos 10 anos, a audiência das novelas vem caindo? Isso nos faz refletir sobre uma série de hipóteses. Sendo elas: . 1- Será que o Público vem perdendo o interesse em assistir novelas com o passar dos anos? 2- Será que com o advento da internet, o público apenas mudou de plataforma, deixando a TV para acompanhar suas sérias no Netflix? 3- Ou será que de fato a concorrência tem assumido um papel relevante nessa batalha pelas telinhas de casa? 4- Será que a Rede Globo está perdendo sua hegemonia? . A resposta para estas perguntas, por enquanto, ficam para um próximo episódio. rsrsrs . . Boa noite! .",
            "url": "https://alesouzaeu.github.io/blog/blog/2020/10/10/_10_10_audiencia_novela_das_nove_rede_globo.html",
            "relUrl": "/blog/2020/10/10/_10_10_audiencia_novela_das_nove_rede_globo.html",
            "date": " • Oct 10, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Do Excel ao Pandas",
            "content": ". Quando comecei a ver as primeiras coisas sobre análise de dados me deparei com a seguinte pergunta: “Quais as vantagens em se utilizar o Pandas no Python ao em vez do Microsoft Excel para análise de dados?” . Não penso que seja uma questão de escolha entre “Python &amp; Pandas” ou “Excel”. Com o tempo passei a enxergá-los como duas ferramentas que se complementam. Eu não usaria o Pandas para procurar dados, mas você poderia. Tampouco usaria o Excel para limpar dados ou automatizar tarefas, mas você poderia. Acima de tudo, a pergunta é: “Quando usar um ou outro?” . O excel pode não ser o ideal se você realmente quer ser um cientista de dados, mesmo que você disponha de tempo para tratar os dados, possua uma base com poucos dados e personalizar visualmente suas planilhas. . . O Pandas . O Pandas é uma biblioteca do Python que possui muitas características interessantes e de alto nível. Por exemplo: Com ele você consegue basicamente limpar e tratar os dados de uma forma muito rápida e extremamente amigável para ser usado em Excel posteriormente. Ou seja, você consegue eliminar dados faltantes ou substituí-los em lote, e ainda trabalhar de forma combinada com outras bibliotecas extremamente diversificadas do Python, pode fazer uma análise exploratória de seus dados sem ter que se quer visualizá-los, o que faz muito sentido quando falamos de uma base repleta de dados. . A biblioteca Pandas é indispensável para qualquer cientista de dados. . . No geral, assim como a linguagem R o Pandas do Python é considerado uma linguagem de programação, enquanto o Excel trabalha como planilha. . As linguagens de programação acabam sim, sendo mais poderosas, lhe proporcionando mais autonomia e liberdade à quem analisa os dados, porém custa mais tempo de aprendizado. O Python por si só, é uma linguagem simples de se assimilar, e que como tudo na vida só demanda um pouco de prática. . Caso você deseje se aprofundar no assunto, tenha certeza que seu esforço será recompensado. . Bons estudos! . Documentação: https://pandas.pydata.org/docs/ .",
            "url": "https://alesouzaeu.github.io/blog/blog/2020/10/10/_10_09_do_excel_ao_pandas.html",
            "relUrl": "/blog/2020/10/10/_10_09_do_excel_ao_pandas.html",
            "date": " • Oct 10, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://alesouzaeu.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "Sobre",
          "content": ". Sou profissional multidisciplinar, comunicador e gestor de pessoas. Com longa experiência em mídia e difusão, tenho me dedicado aplicar a cultura data-driven em meu ambiente de trabalho. Gosto de lidar com pessoas e acredito no poder que dados proporcionam às organizações. .",
          "url": "https://alesouzaeu.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://alesouzaeu.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}